"use strict";

const dapi = require("../../../utils/dapi");
const format = require("date-fns/format");
const addDays = require("date-fns/addDays");
const { monthRemainingDays } = require("../../../utils/date");

function getDaysContents(data) {
  const everyDay = ["video", "activity"];
  const every3Day = ["game", "audio", "book"];
  const result = [];
  const remainingDays = monthRemainingDays(new Date());

  for (let i = 0; i < remainingDays; i++) {
    const todayContents = [];
    everyDay.forEach((type) => {
      const contents = data[type].slice(2 * i, 2 * (i + 1)).map((id) => ({
        type,
        id,
      }));
      todayContents.push(...contents);
    });

    const todayTypeSelected = every3Day[i % 3];
    const portion = 2 * Math.floor(i / 3);
    const contents = data[todayTypeSelected]
      .slice(portion, portion + 2)
      .map((id) => ({
        type: todayTypeSelected,
        id,
      }));

    todayContents.push(...contents);

    result.push(todayContents);
  }

  return result;
}

module.exports = ({ strapi }) => ({
  async fetch(child) {
    const { gender } = child;
    const age = strapi.service("api::child.extended").age(child);
    const days = monthRemainingDays(new Date());

    const growthField = await strapi
      .service("api::child-step.extended")
      .growthField(child.id);
    const field = growthField.symbol;

    return await dapi.plan({ age, gender, days, field });
  },

  async generate(child) {
    const plan = await this.fetch(child);
    const activityService = strapi.service("api::activity.activity");

    const daysContents = getDaysContents(plan.data);
    const now = new Date();

    await daysContents.reduce(async (acc, contents, day) => {
      await acc;
      return createActivities(contents, day);
    }, Promise.resolve());

    await strapi.service("api::child-step.extended").generated(child);

    async function createActivities(contents, day) {
      await contents.reduce(async (acc, content) => {
        await acc;
        return createActivity(content, day);
      }, Promise.resolve());
    }

    async function createActivity(content, day) {
      await activityService.create({
        data: {
          child,
          type: content.type,
          content: content.id.toString(),
          duration: plan.durations[content.id],
          date: format(addDays(now, day), "yyyy-MM-dd"),
          autoGenerated: true,
        },
      });
    }
  },
});
